m4_define([LIBASS_VERSION], [0.15.1])
AC_INIT(libass, LIBASS_VERSION)
AM_INIT_AUTOMAKE([foreign])
AC_CONFIG_MACRO_DIR([m4])
# Disable Fortran checks
define([AC_LIBTOOL_LANG_F77_CONFIG], [:])
LT_INIT
AC_CONFIG_SRCDIR([libass/ass.c])
AC_CONFIG_HEADERS([config.h])

# Checks for programs.
AC_PROG_CC
AM_PROG_CC_C_O

# Checks for header files.
AC_CHECK_HEADERS_ONCE([iconv.h])

# Checks for library functions.
AC_CHECK_FUNCS([strdup strndup])

# Query configuration parameters and set their description
AC_ARG_ENABLE([test], AS_HELP_STRING([--enable-test],
    [enable test program (requires libpng) @<:@default=no@:>@]))
AC_ARG_ENABLE([compare], AS_HELP_STRING([--enable-compare],
    [enable compare program (requires libpng) @<:@default=no@:>@]))
AC_ARG_ENABLE([profile], AS_HELP_STRING([--enable-profile],
    [enable profiling program @<:@default=no@:>@]))
AC_ARG_ENABLE([fontconfig], AS_HELP_STRING([--disable-fontconfig],
    [disable fontconfig support @<:@default=enabled@:>@]))
AC_ARG_ENABLE([directwrite], AS_HELP_STRING([--disable-directwrite],
    [disable DirectWrite support (Windows only) @<:@default=check@:>@]))
AC_ARG_ENABLE([coretext], AS_HELP_STRING([--disable-coretext],
    [disable CoreText support (OSX only) @<:@default=check@:>@]))
AC_ARG_ENABLE([require-system-font-provider], AS_HELP_STRING([--disable-require-system-font-provider],
    [allow compilation even if no system font provider was found @<:@default=enabled:>@]))
AC_ARG_ENABLE([asm], AS_HELP_STRING([--disable-asm],
    [disable compiling with ASM @<:@default=check@:>@]))
AC_ARG_ENABLE([large-tiles], AS_HELP_STRING([--enable-large-tiles],
    [use larger tiles in the rasterizer (better performance, slightly worse quality) @<:@default=disabled@:>@]))

# Checks for available libraries and define corresponding C Macros
# Start with system libs, then check everything else via pkg-config
AS_IF([test "x$ac_cv_header_iconv_h" = xyes], [
    ## Some iconv libraries like GNU's libiconv define iconv_open as a macro to
    ## libiconv_open. As SEARCH_LIBS tests linking not compilation, check for
    ## libiconv_open first. SEARCH_LIBS is smart enough to not add -liconv a second
    ## time in case both versions are defined in the local libiconv.
    use_libiconv=false
    AC_SEARCH_LIBS([libiconv_open], [iconv], [
        use_libiconv=true
    ])
    AC_SEARCH_LIBS([iconv_open], [iconv], [
        use_libiconv=true
    ])
    AS_IF([test "x$use_libiconv" = xtrue], [
        AC_DEFINE(CONFIG_ICONV, 1, [use iconv])
    ])
])
# Locate math functions. Most systems have it either in libc or libm, but a few
# have some, eg C89, functions in libc and others in libm. Use C99 lrint to probe.
AC_SEARCH_LIBS([lrint], [m], [
    # noop
], [
    AC_MSG_ERROR([Unable to locate math functions!])
])
pkg_libs="$LIBS"

## Check for libraries via pkg-config
PKG_CHECK_MODULES([FREETYPE], [freetype2 >= 9.10.3], [
    CFLAGS="$CFLAGS $FREETYPE_CFLAGS"
    LIBS="$LIBS $FREETYPE_LIBS"
    AC_DEFINE(CONFIG_FREETYPE, 1, [found freetype2 via pkg-config])
])

PKG_CHECK_MODULES([FRIBIDI], [fribidi >= 0.19.0], [
    CFLAGS="$CFLAGS $FRIBIDI_CFLAGS"
    LIBS="$LIBS $FRIBIDI_LIBS"
    AC_DEFINE(CONFIG_FRIBIDI, 1, [found fribidi via pkg-config])
])

PKG_CHECK_MODULES([HARFBUZZ], [harfbuzz >= 1.2.3], [
    CFLAGS="$CFLAGS $HARFBUZZ_CFLAGS"
    LIBS="$LIBS $HARFBUZZ_LIBS"
    AC_DEFINE(CONFIG_HARFBUZZ, 1, [found harfbuzz via pkg-config])
])

libpng=false
AS_IF([test "x$enable_test" = xyes || test "x$enable_compare" = xyes], [
    PKG_CHECK_MODULES([LIBPNG], [libpng >= 1.2.0], [
        CFLAGS="$CFLAGS $LIBPNG_CFLAGS"
        AC_DEFINE(CONFIG_LIBPNG, 1, [found libpng via pkg-config])
        libpng=true
    ])
])

## Check for system font providers
### Fontconfig
AS_IF([test "x$enable_fontconfig" != xno], [
    PKG_CHECK_MODULES([FONTCONFIG], [fontconfig >= 2.10.92], [
        CFLAGS="$CFLAGS $FONTCONFIG_CFLAGS"
        LIBS="$LIBS $FONTCONFIG_LIBS"
        AC_DEFINE(CONFIG_FONTCONFIG, 1, [found fontconfig via pkg-config])
        fontconfig=true
    ], [
        fontconfig=false
    ])
])

### Coretext
AS_IF([test "x$enable_coretext" != xno], [
    # Linking to CoreText directly only works from Mountain Lion and iOS.
    # In earlier OS X releases CoreText was part of the ApplicationServices
    # umbrella framework.
    AC_MSG_CHECKING([for CORETEXT])
    AC_COMPILE_IFELSE([
        AC_LANG_PROGRAM( dnl# First test for legacy include
            [[#include <ApplicationServices/ApplicationServices.h>]],
            [[CTFontDescriptorCopyAttribute(NULL, kCTFontURLAttribute);]]
        )
    ], [
        LIBS="$LIBS -framework ApplicationServices -framework CoreFoundation"
        AC_DEFINE(CONFIG_CORETEXT, 1, [found CoreText in ApplicationServices framework])
        coretext=true
        AC_MSG_RESULT([yes])
    ], [
        AC_COMPILE_IFELSE([
            AC_LANG_PROGRAM( dnl# Otherwise check newer include style
                [[#include <CoreText/CoreText.h>]],
                [[CTFontDescriptorCopyAttribute(NULL, kCTFontURLAttribute);]]
            )
        ], [
            LIBS="$LIBS -framework CoreText -framework CoreFoundation"
            AC_DEFINE(CONFIG_CORETEXT, 1, [found CoreText framework])
            coretext=true
            AC_MSG_RESULT([yes])
        ], [
            coretext=false
            AC_MSG_RESULT([no])
        ])
    ])
])

### DirectWrite
AS_IF([test "x$enable_directwrite" != xno], [
    # Linking to DirectWrite directly only works from Windows
    AC_MSG_CHECKING([for DIRECTWRITE])
    AC_COMPILE_IFELSE([
        AC_LANG_PROGRAM([[#include <windows.h>]], [[;]])
    ], [
        directwrite=true
        AC_MSG_RESULT([yes])
        AC_MSG_CHECKING([for Win32 desktop APIs])
        AC_COMPILE_IFELSE([
            AC_LANG_PROGRAM([[
                #include <winapifamily.h>
                #if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP)
                #error Win32 desktop APIs are available
                #endif
            ]], [[;]])
        ], [
            # WinRT/UWP/app build: GDI and LoadLibrary are
            # unavailable, but DirectWrite is always present
            LIBS="$LIBS -ldwrite"
            AC_DEFINE(CONFIG_DIRECTWRITE, 1, [found DirectWrite (WinRT/UWP)])
            AC_MSG_RESULT([no])
        ], [
            # Win32/desktop build: GDI is always present;
            # DirectWrite is optional but can be loaded via LoadLibrary
            LIBS="$LIBS -lgdi32"
            AC_DEFINE(CONFIG_DIRECTWRITE, 1, [found DirectWrite and GDI (Win32)])
            AC_MSG_RESULT([yes])
        ])
    ], [
        directwrite=false
        AC_MSG_RESULT([no])
    ])
])

## Require at least one system font provider by default
AS_IF([test "x$enable_require_system_font_provider" != xno  dnl
        && test "x$fontconfig" != xtrue                     dnl
        && test "x$directwrite" != xtrue                    dnl
        && test "x$coretext" != xtrue                       ], [
    AC_MSG_ERROR(m4_text_wrap(m4_normalize([
            Either DirectWrite (on Windows), CoreText (on OSX), or Fontconfig
            (Linux, other) is required. If you really want to compile without
            a system font provider, add --disable-require-system-font-provider]),
        [                  ],
        [No system font provider!],
        [78]
    ))
])

## Now add packages to pkg_requires
pkg_requires="freetype2 >= 9.10.3"
pkg_requires="fribidi >= 0.19.0, ${pkg_requires}"
pkg_requires="harfbuzz >= 1.2.3, ${pkg_requires}"
AS_IF([test "x$fontconfig" = xtrue], [
    pkg_requires="fontconfig >= 2.10.92, ${pkg_requires}"
])


# Locate and configure Assembler appropriately
AS_IF([test "x$enable_asm" != xno], [
    AS_CASE([$host],
        [i?86-*], [
            INTEL=true
            AS=nasm
            X86=true
            BITS=32
            BITTYPE=32
            ASFLAGS="$ASFLAGS -DARCH_X86_64=0"
        ],
        [x86_64-*-gnux32|amd64-*-gnux32], [
            AS=nasm
            INTEL=true
            X64=true
            BITS=64
            BITTYPE=x32
            ASFLAGS="$ASFLAGS -DARCH_X86_64=1"
        ],
        [x86_64-*|amd64-*], [
            AS=nasm
            INTEL=true
            X64=true
            BITS=64
            BITTYPE=64
            ASFLAGS="$ASFLAGS -DARCH_X86_64=1"
        ],
        [ # default
            INTEL=false
        ]
    )
    AS_IF([test "x$INTEL" = xtrue], [
        AC_CHECK_PROG([nasm_check], [$AS], [yes])
        AS_IF([test "x$nasm_check" != xyes], [
            AC_MSG_WARN(nasm was not found; ASM functions are disabled.)
            AC_MSG_WARN(Install nasm for a significantly faster libass build.)
            enable_asm=no
        ], [
            AS_CASE([$host],
                [*darwin*], [
                    ASFLAGS="$ASFLAGS -f macho$BITTYPE -DPREFIX -DSTACK_ALIGNMENT=16"
                ],
                [*linux*|*solaris*|*haiku*], [
                    ASFLAGS="$ASFLAGS -f elf$BITTYPE -DSTACK_ALIGNMENT=16"
                ],
                [*dragonfly*|*bsd*], [
                    ASFLAGS="$ASFLAGS -f elf$BITTYPE"
                ],
                [*cygwin*|*mingw*], [
                    ASFLAGS="$ASFLAGS -f win$BITTYPE"
                    AS_IF([test "x$BITS" = x32], [
                        ASFLAGS="$ASFLAGS -DPREFIX"
                    ])
                ],
                [ # default
                    AC_MSG_ERROR(m4_text_wrap(m4_normalize([
                            Please contact libass upstream to figure out if ASM
                            support for your platform can be added.
                            In the meantime you will need to use --disable-asm.]),
                        [                  ],
                        [could not identify NASM format for $host !],
                        [78]
                    ))
                ]
            )
            ASFLAGS="$ASFLAGS -Dprivate_prefix=ass"
            AC_MSG_CHECKING([if $AS supports vpmovzxwd])
            echo "vpmovzxwd ymm0, xmm0" > conftest.asm
            AS_IF([$AS conftest.asm $ASFLAGS -o conftest.o >conftest.log 2>&1], [
                AC_MSG_RESULT([yes])
            ], [
                AC_MSG_RESULT([no])
                VER=`($AS --version || echo no assembler) 2>/dev/null | head -n 1`
                AC_MSG_WARN([nasm is too old (found $VER); ASM functions are disabled.])
                AC_MSG_WARN([Install nasm-2.10 or later for a significantly faster libass build.])
                enable_asm=no
            ])
            rm conftest.asm conftest.o > /dev/null 2>&1
        ])
    ])
])


# Relay config results to output files

## Tell Makefiles which assembler and flags to use
AC_SUBST([ASFLAGS], ["$ASFLAGS"])
AC_SUBST([AS], ["$AS"])

## Relay package configuration to libass.pc.in
AC_SUBST([PKG_LIBS_PRIVATE], [${pkg_libs}])
AC_SUBST([PKG_REQUIRES_PRIVATE], [${pkg_requires}])

## Setup conditionals for use in Makefiles
AM_CONDITIONAL([ASM], [test "x$enable_asm" != xno])
AM_CONDITIONAL([INTEL], [test "x$INTEL" = xtrue])
AM_CONDITIONAL([X86], [test "x$X86" = xtrue])
AM_CONDITIONAL([X64], [test "x$X64" = xtrue])

AM_CONDITIONAL([ENABLE_LARGE_TILES], [test "x$enable_large_tiles" = xyes])

AM_CONDITIONAL([ENABLE_COMPARE], [test "x$enable_compare" = xyes && test "x$libpng" = xtrue])
AM_CONDITIONAL([ENABLE_TEST], [test "x$enable_test" = xyes && test "x$libpng" = xtrue])
AM_CONDITIONAL([ENABLE_PROFILE], [test "x$enable_profile" = xyes])

AM_CONDITIONAL([FONTCONFIG], [test "x$fontconfig" = xtrue])
AM_CONDITIONAL([CORETEXT], [test "x$coretext" = xtrue])
AM_CONDITIONAL([DIRECTWRITE], [test "x$directwrite" = xtrue])

## Define C Macros not relating to libraries
AM_COND_IF([ASM], [
    AC_DEFINE(CONFIG_ASM, 1, [ASM enabled])
], [
    AC_DEFINE(CONFIG_ASM, 0, [ASM enabled])
])

AM_COND_IF([ENABLE_LARGE_TILES], [
    AC_DEFINE(CONFIG_LARGE_TILES, 1, [use large tiles])
], [
    AC_DEFINE(CONFIG_LARGE_TILES, 0, [use small tiles])
])

## Make a guess about the source code version
AS_IF([test -d "${srcdir}/.git"], [
    AC_PATH_PROG([git_bin], [git])
    AS_IF([test -n "$git_bin"], [
        srcversion_string="commit: $("$git_bin" -C "$srcdir" describe --tags --long --always --dirty --broken --abbrev=40)"
    ], [
        srcversion_string="custom after: LIBASS_VERSION"
    ])
], [
    dnl# Hope no one creates custom tarballs without adjusting the version
    srcversion_string="tarball: LIBASS_VERSION"
])
AC_DEFINE_UNQUOTED([CONFIG_SOURCEVERSION], ["$srcversion_string"],
                   [string containing info about the used source])

## Setup output beautifier.
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

AC_CONFIG_FILES([Makefile libass/Makefile test/Makefile compare/Makefile profile/Makefile libass.pc])
AC_OUTPUT
